{"version":3,"sources":["Components/SearchBar.js","Components/Popup.js","Components/MovieResults.js","Components/Dashboard.js","Components/Nominate.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleInput","search","className","aria-hidden","type","placeholder","onChange","onKeyPress","Popup","choices","closePopup","addFavourite","console","log","onClick","Title","Year","imdbRating","Language","Genre","src","Poster","Plot","imdbID","disabled","MovieResults","result","openPopup","Dashboard","results","map","key","Nominate","props","state","opened","nominate","bind","this","setState","title","children","favourites","favourite","removeFavourites","Component","App","useState","content","apikey","id","axios","then","data","prevState","removeFavourties","index","splice","e","target","value","Search","tempArray","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.001c87dc.chunk.js","sourcesContent":["  \nimport React from 'react'\n\nfunction SearchBar ({ handleInput, search }) {\n\treturn (\n\t\t<section className=\"search-wrap\">\n\t\t\t<i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n\t\t\t<input \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search for a movie...\" \n\t\t\t\tclassName=\"search-bar \" \n\t\t\t\tonChange={handleInput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/>\n\t\t</section>\n\t)\n}\n\nexport default SearchBar","import React from 'react'\n\nfunction Popup({ choices, closePopup, addFavourite }) {\n\tconsole.log(addFavourite);\n\treturn (\n\t\t<section className=\"popup\">\n\t\t\t<button className=\"btn-close\" onClick={closePopup}><i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n\t\t\t</button>\n\t\t\t<div className=\"content\">\n\t\t\t\t<h2>{ choices.Title } <span>({ choices.Year })</span></h2>\n\t\t\t\t<p className=\"rating\">Rating: {choices.imdbRating} <i className=\"fa fa-star\" aria-hidden=\"true\"></i></p>\n\t\t\t\t<p className=\"extra\">LANGUAGE: {choices.Language}</p>\n\t\t\t\t<p className=\"extra\">GENRE: {choices.Genre}</p>\n\t\t\t\t<div className=\"plot\">\n\t\t\t\t\t<img src={choices.Poster} />\n\t\t\t\t\t<p>{choices.Plot}</p>\n\t\t\t\t</div>\n\n\t\t\t\t<button className=\"btn nom\" onClick={() => addFavourite(choices.imdbID)} disabled=\"true\" >Nominate Me</button> \n\t\t\t</div>\n\t\t</section>\n\t)\n}\n\nexport default Popup\n\n","import React from 'react'\n\nfunction MovieResults({ result, openPopup }) {\n\treturn (\n\t\t<div className=\"movieinfo\" onClick={() => openPopup(result.imdbID)}>\n\t\t\t<img src={result.Poster} />\n\t\t\t<h4>{result.Title}<span>View Details</span></h4>\n\t\t</div>\n\t)\n}\n\nexport default MovieResults","import React from 'react'\n\nimport MovieResults from './MovieResults'\n\nfunction Dashboard ({ results, openPopup }) {\n\treturn (\n\t\t<section className=\"dashboard\">\n\t\t\t{results.map(result => (\n\t\t\t\t<MovieResults key={result.imdbID} result={result} openPopup={openPopup} />\n\t\t\t))}\n\t\t</section>\n\t)\n}\n\nexport default Dashboard\n","import React, { Component } from \"react\";\n\nclass Nominate extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\topened: false,\n\t\t};\n\t\tthis.nominate = this.nominate.bind(this);\n\t}\n  \n\tnominate() {\n\t\tconst { opened } = this.state;\n\t\tthis.setState({\n\t\t\topened: !opened,\n\t\t});\n\t}\n  \n\trender() {\n\t\tlet { title, children } = this.props;\n\t\tconst { opened } = this.state;\n\n\t\tif (opened){\n\t\t\ttitle ='Hide Favourites';\n\t\t}else{\n\t\t\ttitle ='Show Favourites';\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"box\">\n\t\t\t\t<div className=\"nomination\" onClick={this.nominate}>\n                    <i className=\"fa fa-trophy\" aria-hidden=\"true\"></i>\n                    Nominations\n                </div>\n                    \n\t\t\t\t{opened && (\t\t\t\t\t\n\t\t\t\t\t<div className=\"boxcontent\">\n                        <h2>My Nominations</h2>\n\t\t\t\t\t\t{this.props.favourites.map(favourite => (\n                            <div className=\"flexfav\" key={favourite.imdbID}>\n                                <div className=\"myfav\">\n                                    <img src={favourite.Poster} />\n                                    <button onClick={this.removeFavourites}>Remove</button>\n                                </div>\n                            </div>\n                        ))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Nominate;","import React, { useState } from 'react'\nimport axios from 'axios'\nimport style from './Styles/styles.css'\nimport SearchBar from './Components/SearchBar'\nimport Popup from './Components/Popup'\nimport Dashboard from './Components/Dashboard'\nimport 'font-awesome/css/font-awesome.min.css'\nimport Nominate from './Components/Nominate'\n\nfunction App() {\n  const [state, setState] = useState({\n    content: \"\",\n    results: [],\n    favourites: [],\n    choices: {}\n  });\n  const apikey = \"http://www.omdbapi.com/?apikey=dfe6d885\";\n\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apikey + \"&s=\" + state.content).then(({ data }) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      });\n    }\n  }\n  \n  const handleInput = (e) => {\n    let content = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, content: content }\n    });\n  }\n\n  const openPopup = id => {\n    axios(apikey + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      console.log(result);\n\n      setState(prevState => {\n        return { ...prevState, choices: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, choices: {} }\n    });\n  }\n\n  const addFavourite = id => {\n      axios(apikey + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n        let tempArray = state.favourites;\n        tempArray.push(result);\n\n      setState(prevState => {\n\n        return { ...prevState, favourites: tempArray}\n      });\n    });\n    }\n\n  const removeFavourties = (index) => {\n    const favourites = this.state.favourites;\n    favourites.splice(index, 1);\n    this.setState({ favourites });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header>\n\n        <div className=\"nomination\" onClick={openPopup}>\n        <i className=\"fa fa-trophy\" aria-hidden=\"true\"></i>\n        Nominations\n        </div>\n\n        <Nominate title=\"Show Favourites\" closePopup={closePopup} favourites={state.favourites} removeFavourties={removeFavourties}/>\n\n        <h1>The Shoppies:</h1>\n        <h3>Movie awards for Entrepreneurs</h3>\n      </header>\n\n      <main>\n        <SearchBar handleInput={handleInput} search={search} />\n\n        <Dashboard results={state.results} openPopup={openPopup} />\n\n        {(typeof state.choices.Title != \"undefined\") ? <Popup choices={state.choices} closePopup={closePopup} addFavourite={addFavourite}/> : false}\n      </main>\n\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}